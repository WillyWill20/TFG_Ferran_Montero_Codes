# -*- coding: utf-8 -*-
"""CodiWill.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jHTSmdeAyPrsivnXXH3ULY-OiRGz4l6a
"""

import subprocess
subprocess.run('pip install wandb -qU',shell=True)

# Log in to your W&B account
import wandb

command = "wandb login 1e91e6388b74277ef8e557aa5148eac871e0dfd2"
subprocess.run(command, shell=True)

from wandb.integration.keras import WandbMetricsLogger, WandbModelCheckpoint

import argparse

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("--epochs", type=int)
    parser.add_argument("--batch_size", type=int)
    parser.add_argument("--lr", type=float)

    args = parser.parse_args()
    epochs = args.epochs
    batch_size = args.batch_size
    lr = args.lr

#%% Libraries
import os
import numpy as np
import keras
from keras import layers
import tensorflow as tf
from tensorflow import data as tf_data
import matplotlib.pyplot as plt
from tensorflow import keras
from tensorflow.keras.metrics import AUC, Precision, Recall

#%% Loading the folder with the training images
dataset_path = r'/content/drive/MyDrive/DNN_Training/Normalized'

Seed = 21052024
image_size=(256,256)
# batch_size = 32
# epochs = 30
# lr = 0.001

# Start a run, tracking hyperparameters
wandb.init(
    # set the wandb project where this run will be logged
    project="TFG-FerranMS",

    # track hyperparameters and run metadata with wandb.config
    config={
        "dropout": 0.25,
        "epoch": epochs,
        "batch_size": batch_size,
        "learning_rate": lr
    }
)


#%% Generating a dataset
train_ds, val_ds = keras.utils.image_dataset_from_directory(
    dataset_path,
    validation_split=0.2,
    subset="both",
    seed=Seed,
    image_size=image_size,
    batch_size=batch_size)

plt.figure(figsize=(10, 10))
for images, labels in train_ds.take(1):
    for i in range(9):
        ax = plt.subplot(3, 3, i + 1)
        plt.imshow(np.array(images[i]).astype("uint8"))
        plt.title(int(labels[i]))
        plt.axis("off")

#%% Image data augmentation

data_augmentation_layers = tf.keras.Sequential([
    layers.RandomFlip("horizontal_and_vertical", seed=Seed),
    layers.RandomRotation(0.5, seed=Seed),
    layers.RandomContrast(0.5, seed=Seed),
    layers.RandomBrightness(0.1, seed=Seed)])

# Apply data augmentation to the training images
def augment(image, label):
    return data_augmentation_layers(image, training=True), label

train_ds = train_ds.map(augment, num_parallel_calls=tf.data.AUTOTUNE)

# Prefetching samples in GPU memory helps maximize GPU utilization
train_ds = train_ds.prefetch(tf.data.AUTOTUNE)
val_ds = val_ds.prefetch(tf.data.AUTOTUNE)

#%% Build the model

def make_model(input_shape, num_classes, dropout = 0.25):
    inputs = keras.Input(shape=input_shape)

    # Entry block
    x = layers.Rescaling(1.0 / 255)(inputs)
    x = layers.Conv2D(128, 3, strides=2, padding="same")(x)
    x = layers.BatchNormalization()(x)
    x = layers.Activation("relu")(x)

    previous_block_activation = x  # Set aside residual

    for size in [256, 512, 728]:
        x = layers.Activation("relu")(x)
        x = layers.SeparableConv2D(size, 3, padding="same")(x)
        x = layers.BatchNormalization()(x)

        x = layers.Activation("relu")(x)
        x = layers.SeparableConv2D(size, 3, padding="same")(x)
        x = layers.BatchNormalization()(x)

        x = layers.MaxPooling2D(3, strides=2, padding="same")(x)

        # Project residual
        residual = layers.Conv2D(size, 1, strides=2, padding="same")(
            previous_block_activation
        )
        x = layers.add([x, residual])  # Add back residual
        previous_block_activation = x  # Set aside next residual

    x = layers.SeparableConv2D(1024, 3, padding="same")(x)
    x = layers.BatchNormalization()(x)
    x = layers.Activation("relu")(x)

    x = layers.GlobalAveragePooling2D()(x)
    if num_classes == 2:
        units = 1
    else:
        units = num_classes

    x = layers.Dropout(dropout)(x)
    # We specify activation=None so as to return logits
    outputs = layers.Dense(units, activation=None)(x)
    return keras.Model(inputs, outputs)

model = make_model(input_shape=image_size + (3,), num_classes=2)
#keras.utils.plot_model(model, show_shapes=True)

#%% Model summary
model.summary()

#%% Train the model

# checkpoint_dir = r'\content\TFG\Scripts\Checkpoints'
# checkpoint_filepath = os.path.join(checkpoint_dir, "save_at_{epoch}.keras")

#callbacks = [
    #keras.callbacks.ModelCheckpoint(filepath=checkpoint_filepath)]
    #keras.callbacks.EarlyStopping(monitor='val_loss', patience=5, restore_best_weights=True)  # Early stopping


model.compile(
    optimizer=keras.optimizers.Adam(learning_rate=lr),
    loss="binary_crossentropy",
    metrics=[
        keras.metrics.BinaryAccuracy(name='accuracy'),
        AUC(name='auc'),
        Precision(name='precision'),
        Recall(name='recall')])

history = model.fit(train_ds,
                    epochs=epochs,
                    validation_data=val_ds,
                    callbacks=[
                        WandbMetricsLogger(log_freq=3),
                        WandbModelCheckpoint("models"),
                        ])

wandb.finish()
